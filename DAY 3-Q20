import cv2
import numpy as np
from matplotlib import pyplot as plt

def kmeans_clustering(image_path, k=3, max_iter=100, epsilon=0.2):
    # Load the image
    image = cv2.imread(r"C:\Users\poornima\Downloads\im.jpeg")
    if image is None:
        raise FileNotFoundError(f"Image not found at {image_path}")
    
    # Convert the image to RGB (from BGR as loaded by OpenCV)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Reshape the image to a 2D array of pixels
    pixel_values = image.reshape((-1, 3))
    pixel_values = np.float32(pixel_values)

    # Define criteria for K-means (type, max_iter, epsilon)
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, max_iter, epsilon)

    # Apply K-means clustering
    _, labels, centers = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

    # Convert centers to 8-bit values
    centers = np.uint8(centers)

    # Flatten the labels array
    labels = labels.flatten()

    # Map each pixel to the centroid value
    segmented_image = centers[labels]

    # Reshape back to the original image shape
    segmented_image = segmented_image.reshape(image.shape)

    return segmented_image, centers, labels

def visualize_segmentation(original_image_path, segmented_image):
    # Load the original image
    original_image = cv2.imread(original_image_path)
    if original_image is None:
        raise FileNotFoundError(f"Image not found at {original_image_path}")
    
    # Convert original image to RGB
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
    
    # Plot the original and segmented images
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.imshow(original_image)
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(segmented_image)
    plt.title('Segmented Image')
    plt.axis('off')

    plt.show()

if __name__ == "__main__":
    image_path = r"C:\Users\poornima\Downloads\im.jpeg"  # Replace with your image file path
    k = 5  # Number of clusters

    segmented_image, centers, labels = kmeans_clustering(image_path, k)

    visualize_segmentation(image_path, segmented_image)
