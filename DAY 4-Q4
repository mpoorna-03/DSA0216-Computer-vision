import cv2
import numpy as np

# Load the image
image_path = r"C:\Users\poornima\Downloads\im.jpeg"  # Replace with your image path
image = cv2.imread(image_path)
if image is None:
    raise FileNotFoundError(f"Image file not found at {image_path}")

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Apply Canny edge detection
edges = cv2.Canny(blurred, 50, 150)

# Hough Circle Transform parameters
dp = 1  # Inverse ratio of the accumulator resolution to the image resolution
min_dist = 50  # Minimum distance between the centers of detected circles
param1 = 100  # Higher threshold for edge detection (lower threshold is param1/2)
param2 = 30   # Accumulator threshold for circle detection (lower value means more circles)
min_radius = 20  # Minimum circle radius
max_radius = 100  # Maximum circle radius

# Apply Hough Circle Transform
circles = cv2.HoughCircles(edges, cv2.HOUGH_GRADIENT, dp, min_dist,
                           param1=param1, param2=param2,
                           minRadius=min_radius, maxRadius=max_radius)

# Draw circles on the original image
if circles is not None:
    circles = np.uint16(np.around(circles))
    for circle in circles[0, :]:
        center = (circle[0], circle[1])
        radius = circle[2]
        # Draw the circle
        cv2.circle(image, center, radius, (0, 255, 0), 2)

# Save the image with detected circles
output_image_path = r"C:\Users\poornima\Downloads\detected_circles.jpg"
cv2.imwrite(output_image_path, image)

# Optionally, display a message indicating success
print(f"Detected circles saved to: {output_image_path}")
