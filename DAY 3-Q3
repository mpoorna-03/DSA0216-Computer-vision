import cv2
import numpy as np

def kmeans_segmentation(image, k):
    """
    K-means clustering algorithm for image segmentation.

    Args:
        image: Input image
        k: Number of clusters

    Returns:
        Segmented image
    """
    # Reshape image into a feature vector
    pixel_values = image.reshape((-1, 3))
    pixel_values = np.float32(pixel_values)

    # Define criteria for k-means clustering
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)

    # Apply k-means clustering
    ret, label, center = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

    # Convert label values to 8-bit unsigned integers
    center = np.uint8(center)
    res = center[label.flatten()]
    res2 = res.reshape((image.shape))

    return res2

def mean_shift_segmentation(image):
    """
    Mean-shift clustering algorithm for image segmentation.

    Args:
        image: Input image

    Returns:
        Segmented image
    """
    # Convert image to 8-bit unsigned integers
    image = np.uint8(image)

    # Define parameters for mean-shift clustering
    spatial_window = 5
    color_window = 5
    max_iter = 5

    # Apply mean-shift clustering
    term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, max_iter, 1)
    segmented_image = cv2.pyrMeanShiftFiltering(image, spatial_window, color_window, term_crit)

    return segmented_image

# Load image
image = cv2.imread(r'C:\Users\poornima\Downloads\im.jpeg')

# K-means segmentation
k = 5
segmented_image_kmeans = kmeans_segmentation(image, k)

# Mean-shift segmentation
segmented_image_mean_shift = mean_shift_segmentation(image)

# Display results
cv2.imshow('Original Image', image)
cv2.imshow('K-Means Segmentation', segmented_image_kmeans)
cv2.imshow('Mean-Shift Segmentation', segmented_image_mean_shift)
cv2.waitKey(0)
cv2.destroyAllWindows()
