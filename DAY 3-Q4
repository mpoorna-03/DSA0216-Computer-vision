import cv2
import numpy as np

# Load the image
image = cv2.imread(r'C:\Users\poornima\Downloads\im.jpeg')

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define the Gabor filter parameters
ksize = 31
sigma = 4.0
theta = 0
lambd = 10.0
gamma = 0.5
psi = 0

# Create a Gabor filter
gabor_filter = cv2.getGaborKernel((ksize, ksize), sigma, theta, lambd, gamma, psi, ktype=cv2.CV_32F)

# Apply the Gabor filter to the image
filtered_image = cv2.filter2D(gray, cv2.CV_8UC1, gabor_filter)

# Calculate the texture features using the filtered image
texture_features = np.zeros((filtered_image.shape[0], filtered_image.shape[1], 4), dtype=np.float32)

for i in range(4):
    theta = i * np.pi / 4
    gabor_filter = cv2.getGaborKernel((ksize, ksize), sigma, theta, lambd, gamma, psi, ktype=cv2.CV_32F)
    filtered_image_theta = cv2.filter2D(gray, cv2.CV_8UC1, gabor_filter)
    texture_features[:, :, i] = filtered_image_theta

# Calculate the texture energy measures
texture_energy = np.zeros((filtered_image.shape[0], filtered_image.shape[1]), dtype=np.float32)

for i in range(4):
    texture_energy += texture_features[:, :, i] ** 2

texture_energy = np.sqrt(texture_energy)

# Convert texture_energy to CV_8UC1 type
texture_energy_8u = cv2.convertScaleAbs(texture_energy)

# Segment the image based on the texture energy measures
_, segmented_image = cv2.threshold(texture_energy_8u, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Display the results
cv2.imshow('Original Image', image)
cv2.imshow('Texture Energy', texture_energy_8u)
cv2.imshow('Segmented Image', segmented_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
