import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load the image
image_path = r"C:\Users\poornima\Downloads\im.jpeg"
image = cv2.imread(image_path)

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply a threshold to create a binary image
_, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Remove noise using morphological operations (opening)
kernel = np.ones((3, 3), np.uint8)
opening = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel, iterations=2)

# Sure background area (dilation)
sure_bg = cv2.dilate(opening, kernel, iterations=3)

# Sure foreground area (distance transform and thresholding)
dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

# Unknown region (subtract sure foreground from sure background)
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)

# Marker labeling
_, markers = cv2.connectedComponents(sure_fg)

# Add one to all labels so that sure background is not 0 but 1
markers = markers + 1

# Mark the unknown region with zero
markers[unknown == 255] = 0

# Apply watershed algorithm
markers = cv2.watershed(image, markers)

# Mark boundaries in the original image
image[markers == -1] = [0, 0, 255]

# Display results
plt.figure(figsize=(12, 6))
plt.subplot(231), plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)), plt.title('Original Image with Markers')
plt.subplot(232), plt.imshow(binary, cmap='gray'), plt.title('Binary Image')
plt.subplot(233), plt.imshow(opening, cmap='gray'), plt.title('Opening')
plt.subplot(234), plt.imshow(sure_bg, cmap='gray'), plt.title('Sure Background')
plt.subplot(235), plt.imshow(dist_transform, cmap='gray'), plt.title('Distance Transform')
plt.subplot(236), plt.imshow(markers, cmap='jet'), plt.title('Watershed Markers')
plt.tight_layout()
plt.show()
