import cv2
import numpy as np

# Load the video file
cap = cv2.VideoCapture("C:\\Users\\poornima\\Downloads\\VIDEO .CV.mp4")

# Check if the video file is opened successfully
if not cap.isOpened():
    print("Error opening video file")
    exit()

# Create a background subtractor
backSub = cv2.createBackgroundSubtractorMOG2()

# Create a video writer
fourcc = cv2.VideoWriter_fourcc(*'XVID')
fps = cap.get(cv2.CAP_PROP_FPS)
size = (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))
out = cv2.VideoWriter("foreground_video.mp4", fourcc, fps, size)

# Loop over the frames
while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Apply background subtraction
    fgMask = backSub.apply(gray)

    # Threshold the foreground mask
    _, thresh = cv2.threshold(fgMask, 25, 255, cv2.THRESH_BINARY)

    # Find contours of the foreground objects
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Iterate over the contours
    for contour in contours:
        # Calculate the area of the contour
        area = cv2.contourArea(contour)

        # Filter out small contours
        if area > 100:
            # Draw a bounding rectangle around the contour
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

            # Track the movement of the foreground object
            M = cv2.moments(contour)
            cx = int(M['m10'] / M['m00'])
            cy = int(M['m01'] / M['m00'])
            cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)

    # Write the output frame to the video writer
    out.write(frame)

    # Display the output frame
    cv2.imshow('Foreground', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()
